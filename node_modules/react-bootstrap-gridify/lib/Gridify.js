'use strict';

/**
 * Module dependencies
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constantsBootstrap = require('./constants-bootstrap');

var _constantsBootstrap2 = _interopRequireDefault(_constantsBootstrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Init variables
 */

var uniqueIndex = 0;

/**
 * Define pure function Row
 */

function Row(props) {
  return _react2.default.createElement(
    'div',
    { className: 'row' },
    props.children
  );
}

/**
 * Define and Expose Gridify react component
 */

var Gridify = function (_React$Component) {
  _inherits(Gridify, _React$Component);

  function Gridify() {
    _classCallCheck(this, Gridify);

    var _this = _possibleConstructorReturn(this, (Gridify.__proto__ || Object.getPrototypeOf(Gridify)).call(this));

    _this.state = { windowWidth: window.innerWidth };
    return _this;
  }

  _createClass(Gridify, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.handleResize());
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize());
    }
  }, {
    key: 'handleResize',
    value: function handleResize() {
      var self = this;
      return function () {
        self.setState({ windowWidth: window.innerWidth });
      };
    }
  }, {
    key: 'getColsProperties',
    value: function getColsProperties() {
      var number = 1,
          type = 'xs',
          offset = 0,
          size = 12;

      if (this.props.columns) {
        if (this.state.windowWidth < _constantsBootstrap2.default.queries.sm) {
          type = 'xs';
          number = this.props.columns.xs || 1;
        } else if (this.state.windowWidth < _constantsBootstrap2.default.queries.md) {
          type = 'sm';
          number = this.props.columns.sm || this.props.columns.xs || 1;
        } else if (this.state.windowWidth < _constantsBootstrap2.default.queries.lg) {
          type = 'md';
          number = this.props.columns.md || this.props.columns.sm || this.props.columns.xs || 1;
        } else {
          type = 'lg';
          number = this.props.columns.lg || this.props.columns.md || this.props.columns.sm || this.props.columns.xs || 1;
        }
      }

      if (number > 0 || number < _constantsBootstrap2.default.maxCol) {
        size = Math.floor(_constantsBootstrap2.default.maxCol / number);
        offset = Math.floor(_constantsBootstrap2.default.maxCol % number / 2);
      }

      return {
        number: number,
        size: size,
        offset: offset,
        type: type
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var cols = this.getColsProperties();
      var complementClass = this.props.className ? this.props.className : '';
      var className = 'col-' + cols.type + '-' + cols.size + ' ' + complementClass;
      var classNameWithOffset = 'col-' + cols.type + '-offset-' + cols.offset + ' ' + className;
      return _react2.default.createElement(
        'div',
        null,
        this.props.components.reduce(function (value, current, index) {
          if (index % cols.number === 0) {
            value.push([_react2.default.createElement(
              'div',
              { className: classNameWithOffset, key: 'Col' + index },
              current
            )]);
          } else {
            value[Math.floor(index / cols.number)].push(_react2.default.createElement(
              'div',
              { className: className, key: 'Col' + index },
              current
            ));
          }
          return value;
        }, []).map(function (row, index) {
          return _react2.default.createElement(
            Row,
            { key: 'Row' + index },
            row
          );
        })
      );
    }
  }]);

  return Gridify;
}(_react2.default.Component);

exports.default = Gridify;